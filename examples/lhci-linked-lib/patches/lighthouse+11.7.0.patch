diff --git a/node_modules/lighthouse/core/gather/gatherers/dom-informations.d.ts b/node_modules/lighthouse/core/gather/gatherers/dom-informations.d.ts
new file mode 100644
index 0000000..6bec886
--- /dev/null
+++ b/node_modules/lighthouse/core/gather/gatherers/dom-informations.d.ts
@@ -0,0 +1,10 @@
+export default DOMInformations;
+declare class DOMInformations extends BaseGatherer {
+    /**
+     * @param {LH.Gatherer.Context} passContext
+     * @return {Promise<LH.Artifacts.DOMInformations>}
+     */
+    getArtifact(passContext: LH.Gatherer.Context): Promise<LH.Artifacts.DOMInformations>;
+}
+import BaseGatherer from '../base-gatherer.js';
+import * as LH from '../../../types/lh.js';
diff --git a/node_modules/lighthouse/core/gather/gatherers/dom-informations.js b/node_modules/lighthouse/core/gather/gatherers/dom-informations.js
new file mode 100644
index 0000000..796f7e8
--- /dev/null
+++ b/node_modules/lighthouse/core/gather/gatherers/dom-informations.js
@@ -0,0 +1,58 @@
+import * as LH from '../../../types/lh.js';
+
+import BaseGatherer from '../base-gatherer.js';
+
+class DOMInformations extends BaseGatherer {
+  /** @type {LH.Gatherer.GathererMeta} */
+  meta = {
+    supportedModes: ['navigation', 'timespan', 'snapshot'],
+  }
+
+  /**
+   * @param {LH.Gatherer.Context} passContext
+   * @return {Promise<LH.Artifacts.DOMInformations>}
+   */
+  async getArtifact(passContext) {
+    const { driver } = passContext
+    const { executionContext } = driver
+
+    /**
+     * @return {LH.Artifacts.DOMInformations}
+     */
+    function getDOMInformations() {
+      // all
+      // const nodesCount = document.querySelectorAll('*').length
+      // const nodesSVGChildsCount = document.querySelectorAll('svg *').length
+
+      // body
+      const nodesBodyCount = document
+        .getElementsByTagName('body')[0]
+        .querySelectorAll('*').length
+      const nodesBodySVGChildsCount = document
+        .getElementsByTagName('body')[0]
+        .querySelectorAll('svg *').length
+
+      return {
+        lighthousePluginEcoindex: '3.3.0',
+        // nodesCount: nodesCount,
+        nodesBodyCount: nodesBodyCount,
+        // nodesSVGChildsCount: nodesSVGChildsCount,
+        nodesBodySVGChildsCount: nodesBodySVGChildsCount,
+        nodesBodyWithoutSVGChildsCount:
+          nodesBodyCount - nodesBodySVGChildsCount,
+        // nodesWithoutSVGChildsCount: nodesCount - nodesSVGChildsCount,
+      }
+    }
+
+    // await driver.defaultSession.sendCommand('DOMInformations.enable')
+
+    const results = await executionContext.evaluate(getDOMInformations, {
+      args: [],
+    })
+
+    // await driver.defaultSession.sendCommand('DOMInformations.disable')
+
+    return results
+  }
+}
+export default DOMInformations
diff --git a/node_modules/lighthouse/types/artifacts.d.ts b/node_modules/lighthouse/types/artifacts.d.ts
index f601ead..67c9685 100644
--- a/node_modules/lighthouse/types/artifacts.d.ts
+++ b/node_modules/lighthouse/types/artifacts.d.ts
@@ -251,6 +251,13 @@ declare module Artifacts {
     depth: NodeDetails & {max: number;};
   }
 
+  interface DOMInformations {
+    lighthousePluginEcoindex: string;
+    nodesBodyCount: number;
+    nodesBodySVGChildsCount: number;
+    nodesBodyWithoutSVGChildsCount: number;
+  }
+
   interface EmbeddedContentInfo {
     tagName: string;
     type: string | null;
